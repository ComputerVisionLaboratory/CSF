# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_utils.ipynb (unless otherwise specified).

__all__ = ['random_bbox', 'visualize_bbox', 'visualize', 'plot_images', 'pil2cv', 'cv2pil', 'random_color']

# Cell
import glob
import os
import random

import cv2
import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn.functional as F
import torchvision.transforms.functional as TF
from fastai.vision.data import get_grid
from PIL import Image
from PIL.JpegImagePlugin import JpegImageFile
from torchvision import transforms

from einops import rearrange

# Cell
def random_bbox(max_size=224):
    sep1 = random.randint(1, max_size-1)
    sep2 = random.randint(sep1, max_size)
    return torch.cat([
    torch.randint(low=0, high=sep1, size=(1,2)),
    torch.randint(low=sep1, high=sep2, size=(1,2))]).flatten()

# Cell
def visualize_bbox(img, bbox, class_name, color=(255, 0, 0) , thickness=2):
    """Visualizes a single bounding box on the image"""
    BOX_COLOR = (255, 0, 0) # Red
    TEXT_COLOR = (255, 255, 255) # White

    x_min, y_min, x_max, y_max = bbox

    cv2.rectangle(
        img,
        (int(x_min), int(y_min)),
        (int(x_max), int(y_max)),
        color=color,
        thickness=thickness
    )

    ((text_width, text_height), _) = cv2.getTextSize(class_name, cv2.FONT_HERSHEY_SIMPLEX, 0.35, 1)

    cv2.rectangle(
        img,
        (int(x_min), int(y_min - 1.3 * text_height)),
        (int(x_min + text_width), int(y_min)),
        BOX_COLOR,
        -1)
    cv2.putText(
        img,
        text=class_name,
        org=(int(x_min), int(y_min - 0.3 * text_height)),
        fontFace=cv2.FONT_HERSHEY_SIMPLEX,
        fontScale=0.35,
        color=TEXT_COLOR,
        lineType=cv2.LINE_AA,
    )
    return img

def visualize(image, bboxes, category_ids, category_id_to_name, ax=None):
    if ax is None:
        fig, ax = plt.subplots()
    img = image.copy()
    for bbox, category_id in zip(bboxes, category_ids):
        if bbox != []:
            class_name = category_id_to_name[category_id]
            img = visualize_bbox(img, bbox, class_name)
    ax.axis('off')
    ax.imshow(img)

# Cell
def plot_images(images):
    n = len(images)
    axs = get_grid(n, figsize=(12,9))
    for ax, im in zip(axs, images):
        if im.shape[0]==1:
            im = rearrange(im, 'c h w -> h w c')
            ax.imshow(im)
        elif im.shape[0]==3:
            im = rearrange(im, 'c h w -> h w c')
            ax.imshow(im)
        else:
            ax.imshow(im)
        ax.axis('off')
    plt.show()


# Cell
def pil2cv(image):
    ''' PIL型 -> OpenCV型 '''
    new_image = np.array(image, dtype=np.uint8)
    if new_image.ndim == 2:  # モノクロ
        pass
    elif new_image.shape[2] == 3:  # カラー
        new_image = cv2.cvtColor(new_image, cv2.COLOR_RGB2BGR)
    elif new_image.shape[2] == 4:  # 透過
        new_image = cv2.cvtColor(new_image, cv2.COLOR_RGBA2BGRA)
    return new_image

# Cell
def cv2pil(image):
    ''' OpenCV型 -> PIL型 '''
    new_image = image.copy()
    if new_image.ndim == 2:  # モノクロ
        pass
    elif new_image.shape[2] == 3:  # カラー
        new_image = cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB)
    elif new_image.shape[2] == 4:  # 透過
        new_image = cv2.cvtColor(new_image, cv2.COLOR_BGRA2RGBA)
    new_image = Image.fromarray(new_image)
    return new_image

# Cell
def random_color():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    rand_color = (r, g, b)
    return rand_color